#
# remount api
#

#
# convert magic cookie
# {{{ magic_cookie variable [retval_name]
magic_cookie() {
	local host=$(hostname)
	local shost=$(hostname -s)
	local ghost=$(hostname -s | /bin/sed 's/-\?[0-9]\+.*$//g')
	local new
	local retv=$2

	new=$(echo $1 | sed "s!%{host}!${host}!g")
	new=$(echo $new | sed "s!%{shost}!${shost}!g")
	new=$(echo $new | sed "s!%{ghost}!${ghost}!g")

	[ -z "${retv}" ] && rev="RETVALUE"

	eval `printf "%s=\"%s\";" "${retv}" "${new}"`
}
# }}}

#
# Config parser.
# {{{ confp config_file
#
# ARG:
#     $1 -> config file
confp() {
	if [ ! -f "$1" ]; then
		printf "Error: %s not found\n" $1
		exit 1
	fi

	eval `LC_ALL=C \
			sed -e 's![[:space:]]*#.*!!g' \
				-e 's!^[[:space:]]*!!g' \
				-e 's![[:space:]]*$!!g' \
				-e 's![[:space:]]*=[[:space:]]*!="!g' \
				-e 's!$!"!g' \
				-e 's!^"$!!g' -e 's![[:space:]]\+! !g' $1`
}
# }}}

#
# Check whether mount or umount
# {{{ mountsc local_path
#
# ARG:
#     $1 -> Local path
#
mountsc() {
	local pos=$1
	local line
	local rpath
	local lpath
	local chk

	pos=$(echo ${pos} | /bin/sed 's!/\+$!!g')
	line=$(grep " ${pos} " /proc/mounts 2> /dev/null)

	[ -z "${line}" ] && return 1

	eval `echo ${line} | /bin/awk '{print "rpath=\""$1"\";lpath=\""$2"\""}'`

	echo ${rpath} | /bin/grep ":" >& /dev/null
	[ $? -ne 0 ] && return $?

	[ "${lpath}" != "${pos}" ] && return 1

	return 0
}
# }}}

#
# Check local position and mount
# {{{ individual_check local_mount_position
#
# ARG:
#     $1 -> local_mount_position
#
individual_check() {
	local no=1
	local pos=$1

	pos=$(echo $pos | /bin/sed 's!/\+$!!g')
	magic_cookie "${pos}" pos

	RETVALUE="fs=\"\";from=\"\";to=\"${pos}\";opt=\"\""
	while [ ${no} -le ${argc} ]
	do
		eval `echo "${v[$no]}" | awk '{print "fs="$1";from="$2";to="$3";opt="$4}'`
		magic_cookie "${from}" from
		magic_cookie "${to}" to

		if [ "${to}" = "${pos}" ]; then
			RETVALUE="fs=\"${fs}\";from=\"${from}\";to=\"${pos}\";opt=\"${opt}\""
			break
		fi
		no=$[$no + 1]
	done
}
# }}}

#
# Mount File System
# {{{ mountfs fs remote local mountopt
#
# ARG:
#     $1 -> File system type
#     $2 -> Remote Mount Target
#     $3 -> Local Mount Target
#     $4 -> Mount option
#
mountfs() {
    fs_type=$1
	export_path=$2
	mount_pos=$3
	mount_opt=$4

	magic_cookie "${export_path}" export_path
	magic_cookie "${mount_pos}" mount_pos

	if [ -z "${export_path}" ]; then
		if [ -f "${mount_pos}" ]; then
			printf "Mounting %-30s:" "$mount_pos"
		else
			printf "Remount: Remote Target is Null"
		fi
		echo_failure
		echo
		return 1
	fi

	if [ -z "${mount_pos}" ]; then
		printf "Mounting %s: %s" "$export_path" "Local mount is missing"
		echo_failure
		echo
		return 1
	fi

	[ -z "${mount_opt}" ] && mount_opt="rw,noatime"
	[ ! -d "${mount_pos}" ] && mkdir -p ${mount_pos}

	printf "Mounting %-30s to %s:" "$export_path" "$mount_pos"
	mountsc $mount_pos
	chk=$?
	if [ $chk -eq 1 ]; then
		if [ "${fs_type}" != "ifs" ]; then
			${mount} -t ${fs_type} -o ${mount_opt} ${export_path} ${mount_pos} >& /dev/null
			res=$?
		else
			#echo "${mount} -t ${fs_type} ${export_path} ${mount_pos}"
			${mount} -t ${fs_type} ${export_path} ${mount_pos}
			res=$?
			[ ${res} -eq 0 ] && \
				${mount} -o remount,${mount_opt} ${export_path} ${mount_pos} >& /dev/null
		fi
	else
		res=0
	fi
	[ $res -eq 0 ] && echo_success || echo_failure
	[ $res -eq 0 ] && touch $lockfile
	echo

	return $res
}
# }}}

#
# Unmount remote filesystem
# {{{ umountfs remote local
#
# ARG:
#     $1 -> remote mount position
#     $1 -> local mount position
#
umountfs() {
	local export_path=$1
	local mount_pos=$2
	local chk
	local res=0

	magic_cookie "${export_path}" export_path
	magic_cookie "${mount_pos}" mount_pos

	mountsc $mount_pos
	chk=$?

	printf $"Unmounting %-15s from %s :" "$mount_pos" "$export_path"
	if [ $chk -eq 0 ]; then
		${umount} -f $mount_pos >& /dev/null
		res=$?
	fi
	[ $res -eq 0 ] && echo_success || echo_failure
	echo

	return $res
}
# }}}

#
# Remove lock file
# {{{ remove_lock
#
remove_lock() {
	local no=0
	local chk=0

	while [ ${no} -le ${argc} ]
	do
		eval `echo "${v[$no]}" | awk '{print "fs="$1";from="$2";to="$3";opt="$4}'`

		mountsc $to
		[ $? -eq 0 ] && chk=1

		no=$[$no + 1]
	done

	[ ${chk} -eq 0 ] && rm -f ${lockfile}
}
# }}}


#
# Local variables:
# tab-width: 4
# c-basic-offset: 4
# End:
# vim: set filetype=sh noet sw=4 ts=4 fdm=marker:
# vim<600: noet sw=4 ts=4:
#
